<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>代理 on wasabi</title><link>https://sh1luo.github.io/tags/%E4%BB%A3%E7%90%86/</link><description>Recent content in 代理 on wasabi</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 31 May 2021 15:33:50 +0000</lastBuildDate><atom:link href="https://sh1luo.github.io/tags/%E4%BB%A3%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>正/反向代理与科学上网</title><link>https://sh1luo.github.io/posts/2021-05-31-%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link><pubDate>Mon, 31 May 2021 15:33:50 +0000</pubDate><guid>https://sh1luo.github.io/posts/2021-05-31-%E6%AD%A3%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid><description>代理
你可能听过许多 反向代理（Reverse Proxy） 软件例如 Nginx、Apache 等，它们性能优越，被广泛应用于实际场景中，那么你是否知道 “反向” 是什么意思，为什么叫反向呢，明白这个问题有助于我们更深入的理解它们。还有许多框架中常用的的 控制反转（IOC）/依赖注入（DI） 等概念，你是否理解 反转 或 注入 的真正含义。
既然有反向代理，就有正向代理，常用的科学上网就是使用了这个技术，你所见过的例如 ss/ssr/socks5 等等仅仅是协议名，配合上一些混淆方式，它们的技术原理还是 正向代理（ Forward Proxy）。
之前我在「刷」面试题的时候，就遇到过相关问题，“墙以及科学上网的原理”。相信读完这本文你会得到答案。
在了解正反向代理之前先牢记一句话，反向代理 代理并 隐藏服务端，正向代理与之相反，隐藏客户端。
反向代理 OK，记住了这句话，想想 Nginx/Apache 的功能，你将服务部署在服务器上，只公开了 80/443 端口，而内部服务有很多个，通过不同域名访问，然后使用 Nginx/Apache 来接受外界请求，利用提供的指令，例如 sever_name，listen，index，location 来控制其进行转发到不同的内部端口上，由于其使用了非常高效的 epoll IO多路复用模型，效率非常高。
那么你的脑海中应该有大致这么一张图，类似这样：
Reverse Proxy +------------------------------------------------------+ | | | +---------+ | | +-------&amp;gt; | Server1 | | | | +---------+ | +--------------+ | +-----------------+ | | | | | | | | +---------+ | | Client +-----------+--&amp;gt;| google.</description></item></channel></rss>