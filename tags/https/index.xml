<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTPS on 失落</title>
    <link>https://www.kcode.icu/tags/https/</link>
    <description>Recent content in HTTPS on 失落</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 27 Jan 2021 15:57:50 +0000</lastBuildDate><atom:link href="https://www.kcode.icu/tags/https/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>https为什么安全，绝对安全吗</title>
      <link>https://www.kcode.icu/posts/secure/</link>
      <pubDate>Wed, 27 Jan 2021 15:57:50 +0000</pubDate>
      
      <guid>https://www.kcode.icu/posts/secure/</guid>
      <description>截图均使用了 Wireshark 工具进行抓包分析。
 简介 HTTP 是无状态协议，这一特性极大地增强了 HTTP 协议的灵活性，设计的高度自由随着发展也带来了各种问题。比如明文传输且无法验证通信方身份，不适合在安全场景下使用等等。
所以提出了 HTTPS 的概念。HTTPS 并不是新的协议，而是 HTTP over SSL/TLS，也就是使用了 SSL/TLS 加密的 HTTP，解决了 HTTP 不安全的问题。SSL（Secure Sockets Layer） 是 TLS（Transport Layer Security） 的前身，SSL 经历了三个版本的变迁，后来升级为了 TLS，TLS 主要有 1.0、1.1、1.2 和 1.3，版本越高兼容性越不好，现在大部分正在从 1.1 到 1.2 的迁移，部分使用 1.3，我们可以使用 Wireshark 过滤一下进行简单查看。
需要注意的是，应用了 HTTPS 后通信效率会变低，毕竟需要进行额外的握手，加解密步骤。
证书 不管什么版本的 SSL/TLS，只使用对称加密和非对称加密也是不够的，因为无法解决中间人攻击，都需要配合证书来完成整个验证过程。所以在说明 TLS/1.2 与 TLS/1.3 之前有必要介绍一下证书的几个概念。
证书的作用有两个：
 确保通信目标的身份。 确认你的身份。  其实就是确认通信双方的身份，而不是中间某个第三者。再结合非对称加密与对称加密，就可以解决 HTTP 的三大问题，明文传输，消息篡改，窃听。证书的整个流程如下图：
加密与签名 这里有一点需要注意，非对称加密中的公私钥有两种用法，被称为 加密 和 签名 ，很多人容易搞混。不过需要记住不变的是 私钥永远需要保密，不能公布。
 前者是使用公钥加密，私钥解密。将公钥发布出去，只有自己才能获得加密信息，用于 保护信息。 后者是私钥加密，公钥解密。用于 判断信息是否被篡改。  加密很好理解，签名可以这样理解：私钥加密的签名其他人无法伪造（其他人没有私钥），而你将经过私钥加密的信息和未加密明文还有公钥一起交付，对方就可以用公钥去解密（公钥是公开的），然后比对，如果一致了就说明信息没有被篡改，否则已经被改过了，抛弃。</description>
    </item>
    
  </channel>
</rss>
