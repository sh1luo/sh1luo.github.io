<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTP on 失落</title>
    <link>https://www.kcode.icu/tags/http/</link>
    <description>Recent content in HTTP on 失落</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 15 Jan 2021 23:10:22 +0000</lastBuildDate><atom:link href="https://www.kcode.icu/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>谈谈最常见的 HTTP</title>
      <link>https://www.kcode.icu/posts/http/</link>
      <pubDate>Fri, 15 Jan 2021 23:10:22 +0000</pubDate>
      
      <guid>https://www.kcode.icu/posts/http/</guid>
      <description>标题的”最常见“我想应该没有什么争议，对大多数人来说日常生活中接触到最多的应用层协议就是 HTTP了，从聊天软件、浏览器页面再到各种游戏实现，它们无处不在。这篇文章我就带你来看一看这个处于 OSI 标准最上层、最常用也是最普通的 HTTP 它究竟有什么“东西”，一起作为一个不只是听说过的“大神”。
这篇博客我想阐述除书本概念之外的一些个人理解，希望对你有所帮助。
HTTP是什么 超文本传输协议（Hypertext Transfer Protocol，HTTP），是一个应用层面上的，也就是软件双方通信的数据规则，不然你发给我一串 @#$%$%^$%^，只有你能看懂，我怎么知道你说的是什么玩意？双方按照这个规则去通信，有什么需求都在这个规范里写好了发给对方，对方就知道你想干什么，就可以也按照这个规范给你回过去，就是这么简单。只是因为随着技术的发展，所遇到的问题越来越多，安全、效率、可读性等等，不得不提出一系列的解决方案去完善，最终变得很”臃肿“罢了。但是你应该明白，这就是一个为应用程序通信所提出来的一个通信协议，站在这个角度上去理解我相信你能更容易明白。
HTTP方法、状态码这些究竟是什么？ 我常看到有关于 HTTP：
 ”get 和 post“方法有什么区别？ 状态码有哪些？  进阶的可能有：
 HTTP 演变过程是什么，从原因到解决方案一步一步说。   演变过程 </description>
    </item>
    
  </channel>
</rss>
